<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>wujn.me</title>
        <link>Homepage link</link>
        <description>A place to record my fucking life and dreams</description>
        <lastBuildDate>Sun, 26 Jul 2015 10:47:00 +0800</lastBuildDate>
        <language>zh-cn</language>
        
        <item>
            <title>Papery快速指南</title>
            <link>Homepage link/articles/papery-quickstart.html?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=rss</link>
            <guid>Homepage link/articles/papery-quickstart.html</guid>
            <author>wjn161@gmail.com wujn</author>
            <pubDate>Wed, 15 Oct 2014 15:56:00 +0800</pubDate>
            <description>&lt;h2 id=&quot;安装及升级&quot;&gt;安装及升级&lt;/h2&gt;
&lt;p&gt;首先要保证机器上安装有&lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt;及&lt;a href=&quot;https://npmjs.org/&quot;&gt;npm&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;NodeJs版本需要&gt;=0.10。&lt;/p&gt;
&lt;h3 id=&quot;安装&quot;&gt;安装&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;prettyprint linenums lang-bash&quot;&gt;npm install -g papery
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;升级&quot;&gt;升级&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;prettyprint linenums lang-bash&quot;&gt;npm update -g
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;命令列表&quot;&gt;命令列表&lt;/h2&gt;
&lt;h3 id=&quot;create&quot;&gt;create&lt;/h3&gt;
&lt;p&gt;create命令用于创建一个新的博客，使用方法为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;prettyprint linenums lang-bash&quot;&gt;papery create &lt;root&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行后则会在root目录创建一个全新的博客，里面包含papery博客的基本目录结构及配置文件等内容。详细信息会在下文详述。&lt;/p&gt;
&lt;h3 id=&quot;build&quot;&gt;build&lt;/h3&gt;
&lt;p&gt;通过create创建的博客还不能成为一个真正可以访问的网站，因为里面只包含配置信息和元文本，还没有web页面。build用于根据配置和元文本生成web内容。使用方法为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;prettyprint linenums lang-bash&quot;&gt;papery build &lt;root&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;server&quot;&gt;server&lt;/h3&gt;
&lt;p&gt;server可以在本地启动一个调试服务器用于快速预览和调试内容，命令为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;prettyprint linenums lang-bash&quot;&gt;papery server &lt;root&gt; [&lt;port&gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行上述命令将在本地port指定的端口启动一个webserver，其中port为可选项，默认值为8001。在浏览器中输入 &lt;a href=&quot;http://localhost&quot;&gt;http://localhost&lt;/a&gt;:&lt;port&gt;/ 即可访问。&lt;/p&gt;
&lt;h2 id=&quot;目录结构&quot;&gt;目录结构&lt;/h2&gt;
&lt;p&gt;一个papery博客的目录结构如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;prettyprint linenums lang-bash&quot;&gt;root
 | - articles.yml #文章配置
 | - ext.yml      #用户自定义扩展配置
 | - navbar.yml   #导航菜单配置
 | - pages.yml    #独立页面配置
 | - site.yml     #站点主配置
 | - index.html   #首页（自动生成）
 | - rss.xml      #RSS订阅源（自动生成）
 | - tag.html     #标签索引页（自动生成）
 | - articles #放置文章的目录
      |- post1.md    #post1元文本
      |- post1.html  #post1文章页面（自动生成）
      |- post2.md    #post2元文本
      |- post2.html  #post2文章页面（自动生成）
 | - pages #放置独立页面的目录
      |- page1.md    #page1元文本
      |- page1.html  #page1独立页面（自动生成）
 | - assets #资源目录
      |- vendor  #第三方资源
      |- themes  #主题
          |- default #默认主题
 | - templates #模板目录
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;配置站点&quot;&gt;配置站点&lt;/h2&gt;
&lt;p&gt;站点的总配置文件是site.yml。papery使用&lt;a href=&quot;http://www.yaml.org/&quot;&gt;yaml&lt;/a&gt;格式作为配置文件格式。
由于yaml的配置格式非常简洁且具有较高的自解释能力，因此即使你没接触过yaml也可以很快理解配置的意义。&lt;/p&gt;
&lt;p&gt;通过create创建的默认site.yml内容如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;prettyprint linenums lang-yaml&quot;&gt;title: Title of blog
subtitle: Subtitle of blog
link: Homepage link
meta:
  description: Content of description meta tag
  keywords: !!seq
    - keyword1
    - keyword2
    - keyword3
  author: Content of author meta tag
master:
  name: Your name
  about: Introduce yourself here
  email: Your E-mail
rss:
  title: RSS feed title
  desc: RSS feed description
  lang: RSS feed language (ex: zh-cn)
  max: 10
copyright:
  owner: Copyrighter
  beginYear: 2011
  endYear: 2013
theme: default
codetheme: night
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中每个字段的意义已经标示清楚，按照自己的需求修改即可。&lt;/p&gt;
&lt;h2 id=&quot;写文章&quot;&gt;写文章&lt;/h2&gt;
&lt;p&gt;papery中的文章有两部分组成：文章配置及元文本。文章配置用于告诉papery的构建系统文章的一些信息，而元文本则是文章的内容。&lt;/p&gt;
&lt;h3 id=&quot;文章配置&quot;&gt;文章配置&lt;/h3&gt;
&lt;p&gt;文章配置文件为articles.yml。其中一篇文章的配置格式如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;prettyprint linenums lang-yaml&quot;&gt;- id: post-id
  title: 文章标题 
  postedOn: !!str 2013-01-01
  author: 作者
  tags: 
    - 标签1
    - 标签2
  abstract: 摘要内容
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意其中最重要的配置项是id。id作为文章的唯一标识，要求在整个articles.yml配置的所有文章中唯一，并且只能包含小写英文字母、数字和中横“-”。&lt;/p&gt;
&lt;p&gt;id不但指定了元文本的名称，而且会成为文章permalink的。建议的id写法是文章的英文标题按单词用“-”连接。例如“papery-quickstart”。&lt;/p&gt;
&lt;h3 id=&quot;元文本&quot;&gt;元文本&lt;/h3&gt;
&lt;p&gt;元文本是文章的内容，papery根据元文本和文章配置最终生成文章页面。
papery使用&lt;a href=&quot;https://help.github.com/articles/github-flavored-markdown&quot;&gt;GitHub Flavored Markdown&lt;/a&gt;(简称gfm)作为元文本书写格式。
gfm基本保持了标准markdown的功能，同时增加了一些新的特性，文档见&lt;a href=&quot;https://help.github.com/articles/github-flavored-markdown&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;一篇元文本是放在articles目录下以“md”为后缀名的文件，注意元文本的名字对应配置中id字段的名字。例如“id: papery-quickstart”的文章对应的元文本为articles/papery-quickstart.md。&lt;/p&gt;
&lt;p&gt;你可以用任何文本编辑器书写元文本。如果某些地方markdown的表达能力不够，你可以直接插入html代码。papery元文本支持markdown与html混编。&lt;/p&gt;
&lt;h2 id=&quot;写独立页面&quot;&gt;写独立页面&lt;/h2&gt;
&lt;p&gt;博客中有时需要一些如“关于”等独立页面。独立页面的编写与文章非常类似，也是用yaml编写配置文件，用gfm编写元文本。&lt;/p&gt;
&lt;p&gt;独立页面的配置文件为pages.yml，元文本放在pages/目录下。&lt;/p&gt;
&lt;p&gt;独立页面的配置项只有id和title，同样通过id关联配置项和元文本。&lt;/p&gt;
&lt;h2 id=&quot;配置导航菜单&quot;&gt;配置导航菜单&lt;/h2&gt;
&lt;p&gt;papery默认的导航菜单项只有“首页”和“标签”。如果要增加新的导航菜单项，则需要在navbar.yml中配置。例如我们配置两个导航菜单，一个到博客的RSS订阅源，一个到github首页，则可以如下配置navbar.yml&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;prettyprint linenums lang-yaml&quot;&gt;- label: 订阅
  href: /rss.xml
  target: _self

- label: github
  href: https://github.com
  target: _blank
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意target配置项可以配置此导航链接是在本窗口打开还是在新窗口打开。&lt;/p&gt;
&lt;h2 id=&quot;代码高亮&quot;&gt;代码高亮&lt;/h2&gt;
&lt;p&gt;papery内置代码高亮支持，高亮通过&lt;a href=&quot;https://code.google.com/p/google-code-prettify/&quot;&gt;Google Code Prettify&lt;/a&gt;实现。&lt;/p&gt;
&lt;p&gt;插入代码时使用gfm格式，用“```[lang]”开头，并用“```”结尾，如：&lt;/p&gt;
&lt;pre&gt;
```c
#include &lt;stdio.h&gt;

int main(int argc, char** argv) {
    printf(&quot;%s\n&quot;, &quot;Hello, World!&quot;);
}
```
&lt;/pre&gt;

&lt;p&gt;即可实现代码高亮。效果：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;prettyprint linenums lang-c&quot;&gt;#include &lt;stdio.h&gt;

int main(int argc, char** argv) {
    printf(&quot;%s\n&quot;, &quot;Hello, World!&quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;papery自带两种代码高亮风格，分别是“night”和“light”。默认为“night”，可以在site.yml的“codetheme”中配置。&lt;/p&gt;
&lt;h2 id=&quot;数学公式&quot;&gt;数学公式&lt;/h2&gt;
&lt;p&gt;papery默认启用&lt;a href=&quot;http://www.mathjax.org/&quot;&gt;MathJax&lt;/a&gt;插件，因此直接支持LaTeX格式的数学公式渲染。不过由于反斜杠“\”和下划线“_”在markdown中有特殊意义，因此需要转义。&lt;/p&gt;
&lt;h3 id=&quot;内联数学公式&quot;&gt;内联数学公式&lt;/h3&gt;
&lt;p&gt;内联数学公式使用“\$...\$”或“\\(...\\)”包裹，渲染后内联于行内。例如：&lt;/p&gt;
&lt;pre&gt;
\\(e^{i\\pi}+1=0\\)
$e^{i\\pi}+1=0$
&lt;/pre&gt;

&lt;p&gt;效果：$e^{i\pi}+1=0$&lt;/p&gt;
&lt;p&gt;注意反斜杠需要转义。另外，如果需要将“$”解释为字符本身而非Tex数学公式，可以使用转义字符，如：&lt;/p&gt;
&lt;pre&gt;
\$2.50
&lt;/pre&gt;

&lt;h3 id=&quot;单行数学公式&quot;&gt;单行数学公式&lt;/h3&gt;
&lt;p&gt;单行数学公式使用“\$\$...\$\$”或“\\[...\\]”包裹，渲染后单独占一行，例如：&lt;/p&gt;
&lt;pre&gt;
\\[e^{i\\pi}+1=0\\]
$$e^{i\\pi}+1=0$$
&lt;/pre&gt;

&lt;p&gt;效果：
$$e^{i\pi}+1=0$$&lt;/p&gt;
&lt;h2 id=&quot;toc&quot;&gt;TOC&lt;/h2&gt;
&lt;p&gt;效果：
&lt;!-- toc --&gt;&lt;/p&gt;
&lt;p&gt;在文中任何位置插入&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;prettyprint linenums lang-html&quot;&gt;&lt;!-- toc --&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;会在当前位置根据文章outline自动生成TOC。&lt;/p&gt;
&lt;h2 id=&quot;扩展配置及自定义模板&quot;&gt;扩展配置及自定义模板&lt;/h2&gt;
&lt;h3 id=&quot;自定义模板&quot;&gt;自定义模板&lt;/h3&gt;
&lt;p&gt;papery使用&lt;a href=&quot;https://github.com/visionmedia/ejs&quot;&gt;ejs&lt;/a&gt;作为模板引擎。模板文件全部放在templates目录下，后缀名为ejs。对于有html基础的用户可以自己对模板进行定制。&lt;/p&gt;
&lt;h2 id=&quot;扩展配置项绑定&quot;&gt;扩展配置项绑定&lt;/h2&gt;
&lt;p&gt;除了固定配置项外，papery还提供了一个ext.yml用于用户自定义扩展配置。用户在这个yaml中可以输入自己的配置，然后在模板中通过ext命名空间绑定内容。&lt;/p&gt;
&lt;p&gt;例如，在ext.yml中输入：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;prettyprint linenums lang-yaml&quot;&gt;foo: bar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;则在模板文件中用&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;prettyprint linenums lang-html&quot;&gt;&lt;%= ext.foo %&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;则此处内容会被替换为“bar”。结合yaml的数据结构及ejs模板引擎，有编程基础的用户可以灵活的按需定制。&lt;/p&gt;
&lt;h2 id=&quot;自定义主题&quot;&gt;自定义主题&lt;/h2&gt;
&lt;p&gt;papery的模板中没有表现相关的东西，最终的外观表现依赖于皮肤主题。皮肤主题存放在assets/themes/目录下，子目录名称就是主题名称。当前启用的主题在site.yml的theme配置项中配置。&lt;/p&gt;
&lt;p&gt;papery默认带一个名叫“default”的主题。&lt;/p&gt;
&lt;p&gt;自定义主题的主文件是assets/themes/[theme_name]/main.css文件。用户可以通过写不同的main.css文件放在相应目录下，然后修改site.yml来启用不同主题。&lt;/p&gt;
&lt;p&gt;如需引入额外css、js或图片文件，请使用下文提到的插件模式。&lt;/p&gt;
&lt;h2 id=&quot;插件&quot;&gt;插件&lt;/h2&gt;
&lt;p&gt;papery通过在模板文件中引入不同的模板片段启用不同插件。启用插件的方式是将相关代码片段放到相关的注入点模板文件即可。默认有三个注入点：&lt;/p&gt;
&lt;h3 id=&quot;header_plugin&quot;&gt;header_plugin&lt;/h3&gt;
&lt;p&gt;header_plugin的模板文件为templates/inc/header_plugin.ejs。这个文件的内容会被包含到网站所有页面的head部分内。可以用于引入一些在页面主内容加载前需要引入的css、js等。如皮肤主题需要的额外css。&lt;/p&gt;
&lt;h3 id=&quot;footer_plugin&quot;&gt;footer_plugin&lt;/h3&gt;
&lt;p&gt;footer_plugin的模板文件为templates/inc/footer_plugin.ejs。这个文件的内容会被包含到网站所有页面的body部分结束前。可以用于引入一些在页面主内容加载后需要引入的css、js等。如网站统计代码。&lt;/p&gt;
&lt;p&gt;papery默认启用的mathjax插件在这里引入。&lt;/p&gt;
&lt;h3 id=&quot;article_footer_plugin&quot;&gt;article_footer_plugin&lt;/h3&gt;
&lt;p&gt;article_footer_plugin的模板文件为templates/inc/article_footer_plugin.ejs。这个文件的内容被包含到所有文章页面的底部。可以用于引入评论、分享等于文章相关的插件。&lt;/p&gt;
&lt;p&gt;如上述位置不满足需求，用户也可以通过自定义模板方式自己定制页面。&lt;/p&gt;
&lt;h3 id=&quot;常用插件推荐&quot;&gt;常用插件推荐&lt;/h3&gt;
&lt;h4 id=&quot;评论&quot;&gt;评论&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;多说 - &lt;a href=&quot;http://duoshuo.com&quot;&gt;http://duoshuo.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;友言 - &lt;a href=&quot;http://www.uyan.cc&quot;&gt;http://www.uyan.cc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;畅言 - &lt;a href=&quot;http://changyan.sohu.com&quot;&gt;http://changyan.sohu.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;社会化分享&quot;&gt;社会化分享&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;JiaThis - &lt;a href=&quot;http://www.jiathis.com&quot;&gt;http://www.jiathis.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;bShare - &lt;a href=&quot;http://www.bshare.cn&quot;&gt;http://www.bshare.cn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;百度分享 - &lt;a href=&quot;http://share.baidu.com&quot;&gt;http://share.baidu.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;推荐系统&quot;&gt;推荐系统&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;友荐 - &lt;a href=&quot;http://www.ujian.cc&quot;&gt;http://www.ujian.cc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;统计&quot;&gt;统计&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Google Analytics - &lt;a href=&quot;http://www.google.com/analytics&quot;&gt;http://www.google.com/analytics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;百度统计 - &lt;a href=&quot;http://tongji.baidu.com&quot;&gt;http://tongji.baidu.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;量子恒道 - &lt;a href=&quot;http://www.linezing.com&quot;&gt;http://www.linezing.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;腾讯分析 - &lt;a href=&quot;http://ta.qq.com&quot;&gt;http://ta.qq.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;开发&quot;&gt;开发&lt;/h1&gt;
&lt;h2 id=&quot;代码库&quot;&gt;代码库&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;prettyprint linenums lang-bash&quot;&gt;git clone https://github.com/ericzhang-cn/papery.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;运行单元测试&quot;&gt;运行单元测试&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;prettyprint linenums lang-bash&quot;&gt;cd papery
npm test
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
        <item>
            <title>关于本博客搭建的一些技术细节</title>
            <link>Homepage link/articles/about-this-blog.html?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=rss</link>
            <guid>Homepage link/articles/about-this-blog.html</guid>
            <author>wjn161@gmail.com wujn</author>
            <pubDate>Wed, 15 Oct 2014 23:06:00 +0800</pubDate>
            <description>&lt;h2 id=&quot;目录&quot;&gt;目录&lt;/h2&gt;
&lt;p&gt;placeholder&lt;/p&gt;
&lt;h2 id=&quot;动机&quot;&gt;动机&lt;/h2&gt;
&lt;p&gt;placeholder&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>一直红杏出&quot;墙&quot;来,大家懂的</title>
            <link>Homepage link/articles/honxin-proxy.html?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=rss</link>
            <guid>Homepage link/articles/honxin-proxy.html</guid>
            <author>wjn161@gmail.com wujn</author>
            <pubDate>Wed, 22 Oct 2014 09:06:00 +0800</pubDate>
            <description>&lt;p&gt;一个chrome的代理插件，可以访问墙外的网站，速度还不错，没有流量和视频啥的限制，还算是比较稳定。&lt;/p&gt;
&lt;p&gt;一个月10块钱，推荐的人购买了自己也能续费，要是推广一下的话几乎是可以免费用的，看个人喜好了。&lt;/p&gt;
&lt;p&gt;我的推荐地址：&lt;a href=&quot;http://honx.in/i/VEcC8M6vDz0AdVJx&quot;&gt;http://honx.in/i/VEcC8M6vDz0AdVJx&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>Java笔记-Java语言基础(第一部分)</title>
            <link>Homepage link/articles/java-note-01.html?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=rss</link>
            <guid>Homepage link/articles/java-note-01.html</guid>
            <author>wjn161@gmail.com wujn</author>
            <pubDate>Sun, 05 Apr 2015 19:07:00 +0800</pubDate>
            <description>&lt;h2 id=&quot;目录&quot;&gt;目录&lt;/h2&gt;
&lt;!-- toc --&gt;
&lt;hr&gt;
&lt;h2 id=&quot;jdk-jre-jvm说明&quot;&gt;JDK,JRE,JVM说明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;JVM&lt;/strong&gt;
JAVA虚拟机，JAVA的代码执行引擎，执行编译后的.class文件，是一个规范，类似于CLR。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JRE&lt;/strong&gt;
JAVA运行环境，面向JAVA程序用户，可以让系统运行JAVA应用程序，类似于.Net Framework。（JRE=JVM+JAVA标准核心类库）
framework &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JDK&lt;/strong&gt;
JAVA 开发套件，面向开发者，在JRE和JVM之外还包含了一些工具类库和调试工具，类似于.Net Framework SDK&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JDK&gt;JRE&gt;JVM，他们是包含关系,如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7tsy9a.com1.z0.glb.clouddn.com/mewujnjava/01/000.png&quot; alt=&quot;jvm&quot;&gt;&lt;/p&gt;
&lt;p&gt;在Windows的JDK安装路径中(C:\Program Files\Java\jdk1.8.0_05)，可以看到JDK中包含了JRE，JRE的bin中有一个JVM.dll 用于加载其他的jar包来共同执行JAVA应用程序。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考：&lt;a href=&quot;http://www.cnblogs.com/xiaofeixiang/p/4085159.html&quot;&gt;http://www.cnblogs.com/xiaofeixiang/p/4085159.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;java开发环境配置&quot;&gt;Java开发环境配置&lt;/h2&gt;
&lt;h3 id=&quot;1-下载jdk并安装&quot;&gt;1. 下载JDK并安装&lt;/h3&gt;
&lt;p&gt;下载链接 &lt;a href=&quot;http://www.oracle.com/technetwork/cn/java/javase/downloads/jdk8-downloads-2133151-zhs.html&quot;&gt;http://www.oracle.com/technetwork/cn/java/javase/downloads/jdk8-downloads-2133151-zhs.html&lt;/a&gt; &lt;/p&gt;
&lt;h3 id=&quot;2-配置系统环境变量&quot;&gt;2. 配置系统环境变量&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;新建系统变量JAVA_HOME,值为C:\Program Files\Java\jdk1.8.0_05&lt;/li&gt;
&lt;li&gt;查找系统变量Path,增加值为%JAVA_HOME%\bin;&lt;/li&gt;
&lt;li&gt;新建系统变量classpath ,值为.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar; (.;一定不能少，因为它代表当前路径) 
&lt;em&gt;(JDK5.0之后不需要此步骤)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-验证&quot;&gt;3. 验证&lt;/h3&gt;
&lt;p&gt;1.在Windows下 按win+R 出现运行窗口，输入 %JAVA_HOME%,看是否进入 C:\Program Files\Java\jdk1.8.0_05 文件夹&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7tsy9a.com1.z0.glb.clouddn.com/mewujnjava/01/003.png&quot; alt=&quot;jdk&quot;&gt;&lt;/p&gt;
&lt;p&gt;2.然后打开控制台（Win+R,输入cmd）输入 java -version 如果会出现如下信息，就证明配置成功&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7tsy9a.com1.z0.glb.clouddn.com/mewujnjava/01/002.png&quot; alt=&quot;jdk&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;hello-world&quot;&gt;Hello World&lt;/h2&gt;
&lt;p&gt;新建一个文件夹，取名helloworld(最好不要用中文)
进入文件夹，新建一个文本文件，名字为helloworld.java,扩展名为.java，并输入代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;prettyprint linenums lang-java&quot;&gt;public class HelloWorld {
    public static void main(String[] args){
        System.out.println(&quot;hello world&quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;在控制台中进入到之前建的目录 C:\Users\xxx\Desktop\JavaDev\helloworld 输入 javac helloworld.java 然后再输入 java helloworld 程序会输入 hello world&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://7tsy9a.com1.z0.glb.clouddn.com/mewujnjava/01/004.png&quot; alt=&quot;jdk&quot;&gt;&lt;/p&gt;
&lt;p&gt;几个注意的问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;执行javac编译的时候会生成一个class文件，每个类对应一个class文件。一个java文件中可以有多个类，但是public类只能有一个，public的类名必须与java文件名称一致，大小写敏感。&lt;/li&gt;
&lt;li&gt;因为每个类都会生产一个class文件，所以class文件与java文件可以是多对一的关系。&lt;/li&gt;
&lt;li&gt;javac和java 等命令 都是一些exe文件存在于JAVA_HOME中，功能非常丰富，具体可以在控制台中输入 javac -help 查看&lt;/li&gt;
&lt;li&gt;编译UTF-8格式的java文件时会报gbk的编码错误，需要在javac中加入encoding，命令： javac -encoding UTF-8 HelloWorld.java&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;java语言基础&quot;&gt;JAVA语言基础&lt;/h2&gt;
&lt;h3 id=&quot;1-字符集&quot;&gt;1. 字符集&lt;/h3&gt;
&lt;p&gt;JAVA内置使用的是Unicode字符集（变量名等支持多种语言，推荐用英文)，源代码文件字符集推荐使用UTF-8。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考: &lt;a href=&quot;http://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html&quot;&gt;http://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;2-数据类型&quot;&gt;2. 数据类型&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;原始数据类型&lt;/strong&gt;：数值(byte/short/int/long/float/double) 字符(char) 布尔(boolean)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;prettyprint linenums lang-java&quot;&gt;byte b;//1个字节，8个bit(2的8次方256)，范围-128-127
short s;//2个字节，2的16次方(65536)，范围 -32768-32767
int i; //4个字节 2的32次方(4294967296)，范围-2147483648-2147483647
long l;//8个字节 2的64次方
float f;//4字节单精度 
double d;//8字节双精度
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;最好不要使用浮点数比较，会因为精度的问题出错。精度问题参考：&lt;a href=&quot;http://zh.wikipedia.org/wiki/IEEE_754&quot;&gt;http://zh.wikipedia.org/wiki/IEEE_754&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;数值常量默认是int类型int i=10;浮点型默认为double类型，如果要声明其他类型的常量，需要在尾部带字母，如long i=100L中的i为long类型，类似的有&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;prettyprint linenums lang-java&quot;&gt;int i=10;
long l=100L;
float f=1.9F;
double d=1.0D;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;数值8进制和16进制以0(零)开头，8进制中最大为8，于是010就是8，10在8进制中表示为012，16进制带字母，儿进制为0b开头。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;prettyprint linenums lang-java&quot;&gt;int oct=010; //8进制.8
int hex=0xf; //16进制.15
int binary=0b010 //2进制.2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;引用数据类型&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-运算符&quot;&gt;3. 运算符&lt;/h3&gt;
&lt;p&gt;特别的几个需要注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;instanceof 是否是某个类的对象判断，只能用于引用类型，不能用于基础类型，isAssignableFrom可以用于所有类型&lt;/li&gt;
&lt;li&gt;二进制位运算 (^是异或运算，互斥，相同为0，不同为1)&lt;/li&gt;
&lt;li&gt;移位运算&lt;&lt; &gt;&gt; (&lt;strong&gt;&lt;&lt;左移1位是num乘2&lt;/strong&gt;，&lt;strong&gt;&gt;&gt;右移1位是num除2&lt;/strong&gt;) &lt;/li&gt;
&lt;li&gt;(&gt;&gt;&gt;)(按位右移不足补0),表示无符号右移, expression1&gt;&gt;&gt;expression2 运算符把 expression1 的各个位向右移 expression2 指定的位数。右移后左边空出的位用零来填充。移出右边的位被丢弃。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;4-命名规范&quot;&gt;4. 命名规范&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;package包的命名（全部小写，由域名定义）如 me.wujn.helloworld&lt;/li&gt;
&lt;li&gt;类的命名 （单词首字母大写） 如 HelloWorld&lt;/li&gt;
&lt;li&gt;方法的命名 （首字母小写，字母开头大写）如 sayHello()&lt;/li&gt;
&lt;li&gt;常量的命名 （全部大写 ，常加下划线） 如 final int MAX_AGE=25;&lt;/li&gt;
&lt;li&gt;变量命名 (单个单词全小写，多个单词首字母小写，后面单词开头大写) &lt;/li&gt;
&lt;li&gt;实现接口的类命名 (以Impl结尾) 如 HelloWorldImpl:IHelloWorldService&lt;/li&gt;
&lt;li&gt;异常以及测试类命名 (以xxxxException和xxxTest结尾) 如 RuntimeException 和 HelloWorldTest&lt;/li&gt;
&lt;li&gt;注释规范以javadoc的规范为参考&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
        <item>
            <title>使用Docker搭建一个Redis的开发环境</title>
            <link>Homepage link/articles/build-redis-use-docker.html?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=rss</link>
            <guid>Homepage link/articles/build-redis-use-docker.html</guid>
            <author>wjn161@gmail.com wujn</author>
            <pubDate>Sun, 26 Apr 2015 22:54:00 +0800</pubDate>
            <description>&lt;h2 id=&quot;目录&quot;&gt;目录&lt;/h2&gt;
&lt;!-- toc --&gt;
&lt;hr&gt;
&lt;h2 id=&quot;下载并在windows上安装docker&quot;&gt;下载并在Windows上安装Docker&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.docker.com/&quot;&gt;Docker&lt;/a&gt;是一个虚拟化的容器，简单的可以理解为我们常用的虚拟机，但是比起VM来说，要轻量级一些，方便使用和部署，Docker目前在技术运维界已经非常火了，关于Docker的讨论也非常多，这里不展开了，我们只是简单的使用它来快速搭建一个Redis的Linux开发环境，&lt;strong&gt;并不能用于生产环境&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一步，到&lt;a href=&quot;https://docs.docker.com/installation/windows/&quot;&gt;这里&lt;/a&gt;查找Windows上的Docker安装教程，后来被引导到了GitHub上的一个项目，叫&lt;a href=&quot;https://github.com/boot2docker&quot;&gt;boot2docker&lt;/a&gt;，这里你可以找到各种操作系统下的Docker安装教程，我们找到Windows的下载并安装。安装的过程基本都是直接点下一步，下一步就能安装成功了，如果遇到问题，可以先到&lt;a href=&quot;https://docs.docker.com/installation/windows/&quot;&gt;这里&lt;/a&gt;看看，不行就自己Google吧，(这些问题用百度找不太方便)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二步，因为大部分资源都在国外的服务器上，这时候你可能需要一个代理，如果提示由于网络原因无法下载镜像文件，请在cmd中使用代理，这里推荐一个&lt;strong&gt;只对程序员有效&lt;/strong&gt;的免费代理，目前主流的几个程序站都有翻墙和加速效果，地址是 &lt;a href=&quot;http://hx.gy:1080&quot;&gt;http://hx.gy:1080&lt;/a&gt; ，如果需要浏览器代理，请看这篇&lt;a href=&quot;http://wujn.me/articles/honxin-proxy.html&quot;&gt;文章&lt;/a&gt;,代理设置方式为在cmd中输入 &lt;code&gt;set http_proxy=http://hx.gy:1080&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第三步，安装完成后,需要执行两个命令&lt;code&gt;boot2docker init&lt;/code&gt;和&lt;code&gt;boot2docker start&lt;/code&gt;，效果如图&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://7tsy9a.com1.z0.glb.clouddn.com/mewujndocker/001.png&quot; alt=&quot;init&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7tsy9a.com1.z0.glb.clouddn.com/mewujndocker/002.png&quot; alt=&quot;start&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第四步，按照第二步第二个命令中系统的提示，在cmd中复制并输入环境变量，具体看提示即可。完成环境变量设置后输入&lt;code&gt;docker version&lt;/code&gt; 查看输出是否正常，如下图：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://7tsy9a.com1.z0.glb.clouddn.com/mewujndocker/003.png&quot; alt=&quot;start&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第五步，如果第三步输入&lt;code&gt;docker version&lt;/code&gt;报错且提示&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;prettyprint linenums lang-bash&quot;&gt;FATA[0000] Get http:///var/run/docker.sock/v1.18/version: dial unix /var/run/doc
ker.sock: An address incompatible with the requested protocol was used.. Are you
 trying to connect to a TLS-enabled daemon without TLS?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;那么可以尝试重启一下boot2docker的服务，在cmd中运行命令&lt;code&gt;boot2docker restart&lt;/code&gt;如果还是不行，那么可以尝试重新下载boot2docker中docker的镜像&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;prettyprint linenums lang-bash&quot;&gt;boot2docker stop
boot2docker download
boot2docker start
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;使用docker创建redis服务&quot;&gt;使用Docker创建Redis服务&lt;/h2&gt;
&lt;h3 id=&quot;1创建redis服务端的docker-container&quot;&gt;1.创建Redis服务端的Docker Container&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;首先，我们需要创建一个DockerFile命名为DockFile,(没有后缀名,文件夹需要读写权限)里面代码如下&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;prettyprint linenums lang-bash&quot;&gt;FROM        ubuntu:14.04
RUN         apt-get update &amp;&amp; apt-get install -y redis-server
EXPOSE      6379
ENTRYPOINT  [&quot;/usr/bin/redis-server&quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;其次，运行命令 &lt;code&gt;docker build -t &lt;your name&gt;/redis - &lt; DockerFile&lt;/code&gt;，把&lt;your name&gt;替换为你自己的名字，于是运行的命令是&lt;code&gt;docker build -t wjn161/redis - &lt; DockerFile&lt;/code&gt; build的过程很漫长，需要下载很多文件，可以暂时干点别的事情。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最后，运行Redis服务，-d参数表示把redis作为一个后台服务运行，命令为 &lt;code&gt;docker run --name redis -d -p 6379:6379 wjn161/redis&lt;/code&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;参数说明：--name是给container取一个别名，以后再stop和attach的时候就可以使用这个别名，-d 是作为一个后台服务运行，-p是端口映射，把container的6379映射到host的6379端口，这样就可以在host机上使用192.168.59.103:6379来连接container中的redis服务了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;2-创建另外一个application容器-redis客户端，用于运行redis-cli-&quot;&gt;2. 创建另外一个Application容器(Redis客户端，用于运行redis-cli)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;首先，在cmd中输入命令&lt;code&gt;docker run -link redis:db -i -t ubuntu:14.04 /bin/bash&lt;/code&gt; 然后cmd会自动进入到新container中的bash界面。&lt;/li&gt;
&lt;li&gt;其次，在bash中安装redis-cli，输入命令&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;prettyprint linenums lang-bash&quot;&gt;apt-get update
apt-get -y install redis-server
service redis-server stop
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;由于在run的命令中加入了-link参数，所以在这个container中得到了别名db开头的一些环境变量，在bash中输入&lt;code&gt;env | grep DB_&lt;/code&gt; 会得到以下的一些数据&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;prettyprint linenums lang-bash&quot;&gt;DB_PORT_6379_TCP_PORT=6379
DB_PORT=tcp://172.17.0.10:6379
DB_PORT_6379_TCP=tcp://172.17.0.10:6379
DB_PORT_6379_TCP_ADDR=172.17.0.10
DB_PORT_6379_TCP_PROTO=tcp
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;最后我们就可以在测试容器中通过这些变量连接到Redis服务了&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-测试和使用redis服务&quot;&gt;3. 测试和使用Redis服务&lt;/h3&gt;
&lt;p&gt;简单写一个程序测试Redis&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一步，新建一个C#的ConsoleApplication&lt;/li&gt;
&lt;li&gt;第二步，安装Redis的驱动，这里使用&lt;a href=&quot;https://github.com/ServiceStack/ServiceStack.Redis&quot;&gt;ServiceStack.Redis&lt;/a&gt;,直接在NuGet中获取，命令为&lt;code&gt;Install-Package ServiceStack.Redis&lt;/code&gt;，安装成功后编写测试代码&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;prettyprint linenums lang-C#&quot;&gt;using System;
using ServiceStack.Redis;

namespace RedisClientTest
{
    class Program
    {
        static void Main(string[] args)
        {
            using (var client = new RedisClient(&quot;192.168.59.103&quot;, 6379))
            {
                client.Set(&quot;Hello&quot;, &quot;Docker&quot;);
                var result = client.Get&lt;String&gt;(&quot;Hello&quot;);
                Console.WriteLine(result);
            }
            Console.ReadKey();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行后输出的结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7tsy9a.com1.z0.glb.clouddn.com/mewujndocker/004.png&quot; alt=&quot;HelloDocker&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用别人写好的dockerfile来创建mysql-container&quot;&gt;使用别人写好的DockerFile来创建mysql container&lt;/h2&gt;
&lt;p&gt;在GitHub上有很多别人写好的DockerFile来帮助你创建各种优化过配置的Docker Container 这里以mysql为例，我们找到这个项目&lt;a href=&quot;https://github.com/tutumcloud/tutum-docker-mysql&quot;&gt;tutum-docker-mysql&lt;/a&gt;，按照项目的说明，我们在cmd中输入&lt;code&gt;docker run -d -p 3306:3306 tutum/mysql&lt;/code&gt; 经过漫长的下载和安装过程之后(&lt;em&gt;尼玛居然下载了1个小时&lt;/em&gt;)，然后使用&lt;code&gt;docker ps&lt;/code&gt;命令查看一下是否正常运行，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7tsy9a.com1.z0.glb.clouddn.com/mewujndocker/006.png&quot; alt=&quot;ps&quot;&gt;&lt;/p&gt;
&lt;p&gt;截图说明运行正常，之后使用log命令查看日志中的随机密码，即可链接到服务器了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7tsy9a.com1.z0.glb.clouddn.com/mewujndocker/007.png&quot; alt=&quot;ps&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后继续阅读项目中的说明就可以完成各种mysql的工作了，同样的，最后我们还是会写一段代码测试一下mysql是否正常工作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一步 新建一个C#的ConsoleApplication&lt;/li&gt;
&lt;li&gt;第二步 安装mysql的C#驱动，这里使用Mysql.Data,直接在Nuget中安装，输入&lt;code&gt;Install-Package MySql.Data&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;第三步 编写测试代码&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;prettyprint linenums lang-C#&quot;&gt;
using System;
using MySql.Data.MySqlClient;

namespace MySqlClientTest
{
    class Program
    {
        static void Main(string[] args)
        {
            const string connectionString = &quot;server=192.168.59.103;port=3306;database=mysql;uid=admin;pwd=338CCGvO5mE2&quot;;
            const string sqlstr = &quot;SELECT * FROM user&quot;;
            using (var connection = new MySqlConnection(connectionString))
            {
                connection.Open();
                var cmd = new MySqlCommand(sqlstr, connection);
                var reader = cmd.ExecuteReader();
                Console.Write(&quot;Host&quot;);
                Console.Write(&quot;\t\t&quot;);
                Console.Write(&quot;User&quot;);
                Console.WriteLine();
                while (reader.Read())
                {
                    Console.Write((string)reader[&quot;Host&quot;]);
                    Console.Write(&quot;\t\t&quot;);
                    Console.Write((string)reader[&quot;User&quot;]);
                    Console.WriteLine();
                }
                if (!reader.IsClosed)
                {
                    reader.Close();
                }
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后输出为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7tsy9a.com1.z0.glb.clouddn.com/mewujndocker/005.png&quot; alt=&quot;mysql&quot;&gt;&lt;/p&gt;
&lt;p&gt;客户端的结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7tsy9a.com1.z0.glb.clouddn.com/mewujndocker/008.png&quot; alt=&quot;mysqlclient&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;最后的工作&quot;&gt;最后的工作&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;container中的内容在在container关闭之后都会丢失，所以当所有工作都做完之后，需要通过commit命令来提交修改，这样才能保存所有的内容。命令为：&lt;code&gt;docker commit [CONTAINER-ID] [STATUS]&lt;/code&gt;，我们可以先用&lt;code&gt;docker ps&lt;/code&gt;来得到正在运行的container的信息，然后输入命令&lt;code&gt;docker commit c2982423f0c6 tutum/mysql:latest&lt;/code&gt;来提交最新的内容，保存到镜像中，最后通过&lt;code&gt;ps images&lt;/code&gt;查看镜像&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://7tsy9a.com1.z0.glb.clouddn.com/mewujndocker/009.png&quot; alt=&quot;dockerimages&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;以上提到的只是Docker的一些初级的应用，其中还有很多命令以及最重要的网络设置等内容，还需要进一步深入研究，最后，请勿在没有弄清楚原理的情况下在生产环境中尝试Docker。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;另外，在进入container的bash后，需要返回到host机的cmd中时，如果输入exit，则container会退出，这样所有的东西都不能保存了，非常恶心，所以退出的时候需要通过快捷键&lt;code&gt;ctrl+p+ctrl+q&lt;/code&gt;来完成（相当于detach了），这样再次进入的时候就可以通过命令&lt;code&gt;docker attach [CONTIAINER ID]&lt;/code&gt;进入之前退出的container了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tutumcloud/tutum-docker-mysql&quot;&gt;https://github.com/tutumcloud/tutum-docker-mysql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/19688314/how-do-you-attach-and-detach-from-dockers-process&quot;&gt;http://stackoverflow.com/questions/19688314/how-do-you-attach-and-detach-from-dockers-process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/examples/running_redis_service/&quot;&gt;https://docs.docker.com/examples/running_redis_service/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.jackriver.im/building-a-redis-docker-container/&quot;&gt;http://blog.jackriver.im/building-a-redis-docker-container/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/boot2docker/boot2docker&quot;&gt;https://github.com/boot2docker/boot2docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
